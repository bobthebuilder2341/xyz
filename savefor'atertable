import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { SnackbarProvider } from 'notistack';
import { BrowserRouter as Router } from 'react-router-dom';
import axios from 'axios';
import MockAdapter from 'axios-mock-adapter';
import SaveForLaterTable from '../../../components/tables/SaveForLaterTable';

// Mock for axios
const mockAxios = new MockAdapter(axios);

// Mock Component Wrapper
const MockSaveForLaterTable = () => {
  return (
    <SnackbarProvider maxSnack={5} autoHideDuration={3000} preventDuplicate>
      <Router>
        <SaveForLaterTable
          tenantId="1234_dev"
          onClickDelete={() => {}}
          refresh={false}
          searchState={false}
          setSearchState={() => {}}
        />
      </Router>
    </SnackbarProvider>
  );
};

// Test cases
describe('StreamsTable Tests', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    mockAxios.reset();
  });

  it('renders the SaveForLaterTable component and checks for "Stream ID" text', () => {
    render(<MockSaveForLaterTable />);
    const text = screen.getByText('Stream ID');
    expect(text).toBeInTheDocument();
  });

  it('fetches data when tenantId or refresh changes', () => {
    render(<MockSaveForLaterTable />);
    mockAxios.onGet('/api/streams').reply(200, { data: [] });
    
    // Verify data fetching triggered by props change
    expect(mockAxios.history.get.length).toBeGreaterThan(0);
  });

  it('resets rows, page, and fetches data when searchState is true', () => {
    const mockSetSearchState = jest.fn();
    render(
      <SnackbarProvider maxSnack={5} autoHideDuration={3000} preventDuplicate>
        <Router>
          <SaveForLaterTable
            tenantId="1234_dev"
            onClickDelete={() => {}}
            refresh={false}
            searchState={true}
            setSearchState={mockSetSearchState}
          />
        </Router>
      </SnackbarProvider>
    );

    // Verify data reset and searchState reset
    expect(screen.queryByTestId('loading')).toBeInTheDocument();
    expect(mockSetSearchState).toHaveBeenCalledWith(false);
  });

  it('handles page change in pagination', () => {
    render(<MockSaveForLaterTable />);
    const newPage = 2;
    const pageChangeButton = screen.getByTestId('change-page-button'); // Add a data-testid in component

    fireEvent.click(pageChangeButton, { target: { value: newPage } });
    expect(screen.getByText(`Page: ${newPage}`)).toBeInTheDocument();
  });

  it('handles rows per page change', () => {
    render(<MockSaveForLaterTable />);
    const rowsPerPageSelect = screen.getByTestId('rows-per-page-select'); // Add a data-testid in component

    fireEvent.change(rowsPerPageSelect, { target: { value: '10' } });
    expect(screen.getByText('Rows per page: 10')).toBeInTheDocument();
  });

  it('handles sort request and toggles order', () => {
    render(<MockSaveForLaterTable />);
    const sortButton = screen.getByTestId('sort-button'); // Add a data-testid in component

    fireEvent.click(sortButton);
    expect(screen.getByText('Order: desc')).toBeInTheDocument();

    fireEvent.click(sortButton);
    expect(screen.getByText('Order: asc')).toBeInTheDocument();
  });
});
