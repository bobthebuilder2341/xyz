import React from 'react';
import { fireEvent, screen, render, waitFor } from '@testing-library/react';
import MyDocSplitters from '../../pages/my-doc-splitters';
import { BrowserRouter as Router } from 'react-router-dom';
import { SnackbarProvider } from 'notistack';
import MockAdapter from 'axios-mock-adapter';
import axios from 'axios';

let mock = new MockAdapter(axios);

const MockMyDocSplitters = () => {
  return (
    <SnackbarProvider maxSnack={5} autoHideDuration={3000} preventDuplicate>
      <Router>
        <MyDocSplitters />
      </Router>
    </SnackbarProvider>
  );
};

describe('MyDocSplitters Component Tests', () => {
  beforeEach(() => {
    mock.reset();
  });

  it('sets tenantId state correctly when setTenantId is called', () => {
    render(<MockMyDocSplitters />);
    
    // Mock function for enqueueSnackbar (to prevent UI updates)
    const mockEnqueueSnackbar = jest.fn();
    const instance = screen.getByTestId('my-doc-splitters').__reactInternalInstance$.return.stateNode;
    
    instance.setTenantId('tenant123');
    
    // Verify if state change triggers a re-render or updates the UI
    expect(instance.state.tenantId).toBe('tenant123');
  });

  it('sets tenantId and searchState states when onSearchHandler is called', () => {
    render(<MockMyDocSplitters />);
    
    const searchField = screen.getByLabelText('Search Field');
    fireEvent.change(searchField, { target: { value: 'tenant123' } });
    
    // Now simulate the search button click
    const searchButton = screen.getByText('Search');
    fireEvent.click(searchButton);
    
    // Verify that tenantId and searchState are updated
    expect(screen.getByTestId('my-doc-splitters').__reactInternalInstance$.return.stateNode.state.tenantId).toBe('tenant123');
    expect(screen.getByTestId('my-doc-splitters').__reactInternalInstance$.return.stateNode.state.searchState).toBe(true);
  });

  it('sets searchState state correctly when setSearchState is called', () => {
    render(<MockMyDocSplitters />);
    
    // Mock function for enqueueSnackbar (to prevent UI updates)
    const instance = screen.getByTestId('my-doc-splitters').__reactInternalInstance$.return.stateNode;
    
    instance.setSearchState(true);
    
    // Verify if searchState is updated correctly
    expect(instance.state.searchState).toBe(true);
  });

  it('sets confirmationDialog state correctly when handleDeleteDialogOpen is called', () => {
    render(<MockMyDocSplitters />);
    
    // Get the instance
    const instance = screen.getByTestId('my-doc-splitters').__reactInternalInstance$.return.stateNode;
    
    instance.handleDeleteDialogOpen();
    
    // Confirm state update
    expect(instance.state.confirmationDialog).toBe(true);
  });

  it('sets confirmationDialog state correctly when handleDeleteDialogClose is called', () => {
    render(<MockMyDocSplitters />);
    
    const instance = screen.getByTestId('my-doc-splitters').__reactInternalInstance$.return.stateNode;
    
    instance.setState({ confirmationDialog: true });
    instance.handleDeleteDialogClose();
    
    expect(instance.state.confirmationDialog).toBe(false);
  });

  it('sets processorIdToDelete state correctly when onClickDelete is called', () => {
    render(<MockMyDocSplitters />);
    
    const instance = screen.getByTestId('my-doc-splitters').__reactInternalInstance$.return.stateNode;
    
    instance.onClickDelete('processor123');
    
    expect(instance.state.processorIdToDelete).toBe('processor123');
  });

  it('toggles refresh state when refresh method is called', () => {
    render(<MockMyDocSplitters />);
    
    const instance = screen.getByTestId('my-doc-splitters').__reactInternalInstance$.return.stateNode;
    
    instance.setState({ refresh: false });
    instance.refresh();
    expect(instance.state.refresh).toBe(true);
    
    instance.refresh();
    expect(instance.state.refresh).toBe(false);
  });

  it('sets textFieldState correctly when updating textFieldState', () => {
    render(<MockMyDocSplitters />);
    
    const instance = screen.getByTestId('my-doc-splitters').__reactInternalInstance$.return.stateNode;
    
    instance.setState({ textFieldState: 'new text' });
    
    expect(instance.state.textFieldState).toBe('new text');
  });

  it('calls splitterToDelete and updates state on delete button click', async () => {
    render(<MockMyDocSplitters />);
    
    const instance = screen.getByTestId('my-doc-splitters').__reactInternalInstance$.return.stateNode;
    
    mock.onDelete('/textract/documentSplitter/deleteProcessor').reply(200);
    
    instance.setState({ processorIdToDelete: 'processor123' });
    instance.onClickConfirmationDialogDeleteButton();
    
    await waitFor(() => {
      expect(instance.state.refresh).toBe(true);
    });
  });
});
