import { render, screen, waitFor } from '@testing-library/react';
import LinesChart from './LinesChart'; // Path to your LinesChart component
import '@testing-library/jest-dom';
import { CommonConstants } from '../common/CommonConstants'; // Path to your CommonConstants
import { ChartColorConstant } from '../common/constants/ColorConstants'; // Path to ColorConstants

jest.mock('../assets/lineschartData.json', () => ({
  data: [
    { name: 'Page A', uv: 4000, pv: 2400, amt: 2400 },
    { name: 'Page B', uv: 3000, pv: 1398, amt: 2210 },
    { name: 'Page C', uv: 2000, pv: 9800, amt: 2290 },
    { name: 'Page D', uv: 2780, pv: 3908, amt: 2000 },
  ],
}));

describe('LinesChart Component', () => {
  it('should render the chart correctly with data', async () => {
    render(<LinesChart />);

    // Wait for the chart to load and verify that the chart components are rendered
    await waitFor(() => {
      expect(screen.getByTestId('line-chart')).toBeInTheDocument();
      expect(screen.getByTestId('line-chart').children.length).toBeGreaterThan(0);
    });

    // Check that the chart has the correct components like XAxis, YAxis, etc.
    expect(screen.getByTestId('x-axis')).toBeInTheDocument();
    expect(screen.getByTestId('y-axis')).toBeInTheDocument();
    expect(screen.getByTestId('line')).toBeInTheDocument();
  });

  it('should render an empty chart when no data is provided', async () => {
    // Mocking an empty data response
    jest.mock('../assets/lineschartData.json', () => ({
      data: [],
    }));

    render(<LinesChart />);

    // Check that the chart is rendered but without any lines
    await waitFor(() => {
      expect(screen.getByTestId('line-chart')).toBeInTheDocument();
      expect(screen.getByTestId('line-chart').children.length).toBe(0);
    });
  });

  it('should call the correct constants for chart dimensions', () => {
    render(<LinesChart />);

    // Check if the width and height are set from the CommonConstants
    const chartContainer = screen.getByTestId('line-chart');
    expect(chartContainer).toHaveStyle(`width: ${CommonConstants.LINE_CHART_WIDTH}`);
    expect(chartContainer).toHaveStyle(`height: ${CommonConstants.LINE_CHART_HEIGHT}`);
  });

  it('should render the chart correctly when data is loaded asynchronously', async () => {
    render(<LinesChart />);

    // Wait for the chart to be populated with data
    await waitFor(() => {
      expect(screen.getByTestId('line-chart')).toBeInTheDocument();
    });

    // Check that the chart has the right number of lines based on the mock data
    expect(screen.getAllByTestId('line')).toHaveLength(3); // Assuming 3 lines for 3 properties: uv, pv, amt
  });
});
import { render, screen, fireEvent } from '@testing-library/react';
import SimpleAccordion from './SimpleAccordion';
import '@testing-library/jest-dom';
import { Accordion, AccordionSummary, AccordionDetails } from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';

const mockData = [
  {
    question: 'What is your name?',
    answer: 'My name is John Doe.',
  },
  {
    question: 'What is your favorite color?',
    answer: 'My favorite color is blue.',
  },
];

describe('SimpleAccordion Component', () => {
  it('should render section header correctly', () => {
    const sectionHeader = 'Frequently Asked Questions';
    render(<SimpleAccordion sectionHeader={sectionHeader} questionAnswers={mockData} />);
    
    // Check if section header is rendered
    expect(screen.getByText('Frequently Asked Questions')).toBeInTheDocument();
  });

  it('should render all questions and answers correctly', () => {
    const sectionHeader = 'Frequently Asked Questions';
    render(<SimpleAccordion sectionHeader={sectionHeader} questionAnswers={mockData} />);

    // Check if each question and answer pair is rendered correctly
    mockData.forEach(({ question, answer }) => {
      expect(screen.getByText(question)).toBeInTheDocument();
      expect(screen.getByText(answer)).toBeInTheDocument();
    });
  });

  it('should expand and collapse accordion when clicked', () => {
    const sectionHeader = 'Frequently Asked Questions';
    render(<SimpleAccordion sectionHeader={sectionHeader} questionAnswers={mockData} />);

    // Get the accordion summary element (section header)
    const accordionSummary = screen.getByText('Frequently Asked Questions').closest('div');

    // Initially, check if the AccordionDetails is not rendered (collapsed state)
    expect(screen.queryByTestId('faqAccordian')).toBeNull();

    // Simulate clicking the accordion summary to expand it
    fireEvent.click(accordionSummary);

    // Check if AccordionDetails with questions is now rendered (expanded state)
    expect(screen.getAllByTestId('faqAccordian')).toHaveLength(mockData.length);

    // Simulate clicking the accordion summary to collapse it
    fireEvent.click(accordionSummary);

    // Check if AccordionDetails is no longer rendered (collapsed state)
    expect(screen.queryByTestId('faqAccordian')).toBeNull();
  });

  it('should render expand icon correctly', () => {
    const sectionHeader = 'Frequently Asked Questions';
    render(<SimpleAccordion sectionHeader={sectionHeader} questionAnswers={mockData} />);

    // Check if the ExpandMoreIcon is rendered for each accordion summary
    expect(screen.getAllByRole('button')).toHaveLength(mockData.length); // One button for each question
    expect(screen.getAllByRole('button')[0].querySelector('svg')).toBeInTheDocument(); // Check for the icon
  });
});






import { render, screen, fireEvent, act } from '@testing-library/react';
import FileTableView from './FileTableView'; // Path to your component
import '@testing-library/jest-dom';
import { TablePaginationActionsProps } from './TablePaginationActions'; // Path to TablePaginationActions if needed

const mockSetCurrentPage = jest.fn();
const mockSetCheckedFiles = jest.fn();
const mockSetIsAllFilesChecked = jest.fn();
const mockCheckedHandleToggle = jest.fn();
const mockOnClickFileFunctionality = jest.fn();
const mockFileList = [
  { fileName: 'file1.txt', filePath: 'path/to/file1.txt', fileType: 'file' },
  { fileName: 'folder1/', filePath: 'path/to/folder1/', fileType: 'folder' },
];
const mockProps = {
  optionVisibility: {},
  modalVisibility: {},
  fileList: mockFileList,
  onClickFileFunctionality: mockOnClickFileFunctionality,
  checkedFiles: [],
  checkedHandleToggle: mockCheckedHandleToggle,
  parentDirectorySetter: jest.fn(),
  fetchAndUpdateFileList: jest.fn(),
  setCheckedFiles: mockSetCheckedFiles,
  currentPage: 0,
  setCurrentPage: mockSetCurrentPage,
  isAllFilesChecked: false,
  setIsAllFilesChecked: mockSetIsAllFilesChecked,
};

describe('FileTableView Component', () => {
  it('should render file list correctly', () => {
    render(<FileTableView {...mockProps} />);
    expect(screen.getByText('file1.txt')).toBeInTheDocument();
    expect(screen.getByText('folder1/')).toBeInTheDocument();
  });

  it('should toggle select all checkbox correctly', () => {
    render(<FileTableView {...mockProps} />);

    // Check that the checkbox is not checked initially
    expect(screen.getByTestId('fileTableViewCheckbox')).not.toBeChecked();

    // Simulate checking the "select all" checkbox
    fireEvent.click(screen.getByTestId('fileTableViewCheckbox'));

    // Check that the checkbox is now checked
    expect(mockSetCheckedFiles).toHaveBeenCalled();
    expect(mockSetIsAllFilesChecked).toHaveBeenCalledWith(true);
  });

  it('should handle page changes correctly when using pagination', () => {
    render(<FileTableView {...mockProps} />);
    
    // Mock for the pagination buttons
    const nextPageButton = screen.getByLabelText('next page');
    fireEvent.click(nextPageButton);
    
    // Check if setCurrentPage was called with the correct value
    expect(mockSetCurrentPage).toHaveBeenCalledWith(1);
  });

  it('should handle rows per page change correctly', () => {
    render(<FileTableView {...mockProps} />);
    
    // Change the rows per page
    fireEvent.change(screen.getByLabelText('Files per page'), { target: { value: 10 } });
    
    // Check if the rows per page value has been updated
    expect(screen.getByLabelText('Files per page').value).toBe('10');
  });

  it('should render the download status indicator correctly', () => {
    render(<FileTableView {...mockProps} />);

    // Check if the download indicator is displayed for files in the download list
    const rotatingIcon = screen.queryByTestId('rotating-icon');
    expect(rotatingIcon).toBeNull(); // Assuming it's not in the list
  });
  
  it('should call the file click handler when a file is clicked', () => {
    render(<FileTableView {...mockProps} />);

    const fileButton = screen.getByText('file1.txt');
    fireEvent.click(fileButton);

    expect(mockOnClickFileFunctionality).toHaveBeenCalledWith(mockFileList[0]);
  });

  it('should disable pagination buttons when necessary', () => {
    render(<FileTableView {...mockProps} />);
    
    // Assuming the page is 0, the "First" and "Previous" buttons should be disabled
    const firstPageButton = screen.getByLabelText('first page');
    const previousPageButton = screen.getByLabelText('previous page');
    expect(firstPageButton).toBeDisabled();
    expect(previousPageButton).toBeDisabled();
  });

  it('should render folder icon for folder files', () => {
    render(<FileTableView {...mockProps} />);

    const folderIcon = screen.getByTestId('folder-icon');
    expect(folderIcon).toBeInTheDocument();
  });
});
